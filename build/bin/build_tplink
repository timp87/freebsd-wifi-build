#!/bin/sh

SCRIPT_NAME="`basename $0`"
SCRIPT_DIR="$(dirname `realpath $0`)"
CUR_DIR="`pwd`"

# suck in the per-device options
CFGNAME=$1
shift
. ${SCRIPT_DIR}/../cfg/${CFGNAME} || exit 1
# If X_BUILD_BASE_CFG is set, also load that in.
if [ -n "${X_BUILD_BASE_CFG}" ]; then
	. ${SCRIPT_DIR}/../cfg/base/${X_BUILD_BASE_CFG} || exit 1
fi

# include the config variable generation code
. ${SCRIPT_DIR}/../lib/cfg.sh || exit 1

# This builds a tplink system image from the given kernel and MFS.

# gzip or lzma the kernel image
if [ "${TPLINK_COMPRESSION_GZIP}" = "YES" ]; then
	cat ${X_KERNEL} | gzip -9 | dd of=${X_KERNEL}.gz
	TPLINK_KERNEL=${X_KERNEL}.gz
elif [ "${TPLINK_COMPRESSION_LZMA}" = "YES" ]; then
	/usr/local/bin/lzma e ${X_KERNEL} ${X_KERNEL}.lzma || exit 1
	TPLINK_KERNEL=${X_KERNEL}.lzma
fi

# build mktplinkfw if not built or needs a refresh
make -C ${SCRIPT_DIR}/../../programs/mktplinkfw  || exit 1
make -C ${SCRIPT_DIR}/../../programs/mktplinkfw2  || exit 1

# If the kernel was built to netboot and has the MFSroot already
# compiled into it, use the all in one argument "-c" and drop
# the ramdisk from the command line.  Add "-Q" to ignore the fact
# that the f/w image will exceed the capacity of the flash on the
# device.

X_ROOTFS_CMDOPT=""
X_ROOTFS_SKIPOPT="-c"

if [ "${TPLINK_SKIP_ROOTFS}" = "NO" ]; then
	X_ROOTFS_CMDOPT="-r ${X_FSIMAGE}${X_FSIMAGE_SUFFIX}"
	X_ROOTFS_SKIPOPT="-a 0x10000"
fi

# Check the kernel file for a start address.
# I think this /used/ to be a fixed 256 bytes, but no longer..

X_KERN_ELF_STARTADDR="`elfdump -e ${X_KERNEL} | grep e_entry | cut -f2 -d: | sed 's@ *@@'`"
echo "*** TPLINK_KERN_STARTADDR=${TPLINK_KERN_STARTADDR}"
echo "*** X_KERN_ELF_STARTADDR=${X_KERN_ELF_STARTADDR}"

TPLINK_KERN_STARTADDR=${X_KERN_ELF_STARTADDR}

if [ "${TPLINK_CONFIG_STYLE}" = "NEW" ]; then
	# Factory flash image
	${SCRIPT_DIR}/../../programs/mktplinkfw/mktplinkfw \
		-H ${TPLINK_HARDWARE_ID} \
		-W ${TPLINK_HARDWARE_VER} \
		-F ${TPLINK_HARDWARE_FLASHID} \
		-L ${TPLINK_KERN_LOADADDR} \
		-E ${TPLINK_KERN_STARTADDR} \
		-N ${TPLINK_IMG_NAME} \
		-V ${TPLINK_IMG_VERSION} \
		-s \
		-X ${TPLINK_FIRMWARE_RESERV} \
		-k ${TPLINK_KERNEL} \
		${X_ROOTFS_CMDOPT} \
		${X_ROOTFS_SKIPOPT} \
		-o ${X_TFTPBOOT}/${CFGNAME}.factory.bin || exit 1

	# bootm-able image
	${SCRIPT_DIR}/../../programs/mktplinkfw/mktplinkfw \
		-H ${TPLINK_HARDWARE_ID} \
		-W ${TPLINK_HARDWARE_VER} \
		-F ${TPLINK_HARDWARE_FLASHID} \
		-L ${TPLINK_KERN_LOADADDR} \
		-E ${TPLINK_KERN_STARTADDR} \
		-N ${TPLINK_IMG_NAME} \
		-V ${TPLINK_IMG_VERSION} \
		-s \
		-c \
		-X ${TPLINK_FIRMWARE_RESERV} \
		-k ${TPLINK_KERNEL} \
		-o ${X_TFTPBOOT}/${CFGNAME}.kernel.bin || exit 1

elif [ "${X_MFSROOT}" = "YES" ]; then
# Create firmware suitable for TFTP
	${SCRIPT_DIR}/../../programs/mktplinkfw/mktplinkfw	\
	     -B ${TPLINK_BOARDTYPE} -R ${TPLINK_ROOTFS_START} \
	     -L ${TPLINK_KERN_LOADADDR} -E ${TPLINK_KERN_STARTADDR} \
	     -k ${TPLINK_KERNEL} -c -N ${TPLINK_IMG_NAME} \
	     -V ${TPLINK_IMG_VERSION} \
	     -o ${X_TFTPBOOT}/${CFGNAME}.factory.bin \
	|| exit 1
else
# Create firmware suitable for flashing
	${SCRIPT_DIR}/../../programs/mktplinkfw/mktplinkfw	\
	    -B ${TPLINK_BOARDTYPE} -R ${TPLINK_ROOTFS_START} \
	    -L ${TPLINK_KERN_LOADADDR} -E ${TPLINK_KERN_STARTADDR} \
	    -k ${TPLINK_KERNEL} -N ${TPLINK_IMG_NAME} \
	    -V ${TPLINK_IMG_VERSION} \
	    ${X_ROOTFS_CMDOPT} \
	    -o ${X_TFTPBOOT}/${CFGNAME}.factory.bin \
	|| exit 1
fi

exit 0
