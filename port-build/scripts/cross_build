#!/bin/sh

# set -e

SCRIPT_NAME="`basename $0`"
SCRIPT_DIR="$(dirname `realpath $0`)"
CUR_DIR="`pwd`"

# need a root directory!
if [ "x${X_PACKAGE_ROOTDIR}" = "x" ]; then
	echo "ERROR: need X_PACKAGE_ROOTDIR defined (for rootfs)."
	exit 1
fi

. ${SCRIPT_DIR}/cross_build.subr

# For now, let's just do this in one big hit, but
# later on we should automate it somewhat.

# Need a port basedir
if [ "x${X_PORTBUILD_DIR}" = "x" ]; then
	echo "ERROR: need X_PORTBUILD_DIR defined."
	exit 1
fi

# And, need a target platform
if [ "x${X_PORTBUILD_PLATFORM}" = "x" ]; then
	echo "ERROR: need X_PORTBUILD_PLATFORM defined."
	exit 1
fi

# Verify this is a platform we know about
case "${X_PORTBUILD_PLATFORM}" in
	mips|mipsel)
		;;
	*)
		echo "ERROR: for now, we only support mips."
		exit 1
		;;
esac

# .. and distfiles
if [ "x${X_PACKAGE_DISTFILE_DIR}" = "x" ]; then
	echo "ERROR: need X_PACKAGE_DISTFILE_DIR defined."
	exit 1
fi

# .. and a build artefacts directory for the given platform
if [ "x${X_PACKAGE_BUILDROOT_DIR}" = "x" ]; then
	echo "ERROR: need X_PACKAGE_BUILDROOT_DIR defined."
	exit 1
fi

X_PORTBUILD_PORT=$1
shift

port_incplatform
port_incrules

runcmd()
{
	case $1 in
		'clean')
			port_clean
		;;
		'git_clone')
			port_git_clone
		;;
		'git_checkout')
			port_git_checkout
		;;
		'fetch')
			port_fetch
		;;
		'unpack')
			port_unpack
		;;
		'patch')
			port_patch
		;;
		'prefiles')
			port_prefiles
		;;
		'configure')
			port_configure
		;;
		'cmake')
			port_cmake
		;;
		'build')
			port_build
		;;
		'staging')
			port_staging
		;;
		'files')
			port_files
		;;
		'package')
			port_package
		;;
		*)
			echo "Unknown command ($1)"
			exit 1
		;;
	esac
}

if [ "x$1" = "x" ]; then
	CMDLIST="clean fetch git_checkout unpack prefiles patch configure cmake build staging files package"
else
	CMDLIST="$*"
fi

for i in ${CMDLIST}; do
	runcmd ${i}
done
